<!DOCTYPE html>
<html>
<head>

<title th:text="#{application.title}">the title of the application</title>

<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->
<script type="text/javascript" th:src="@{/assets/js/json2.js}"></script>
<script type="text/javascript" th:src="@{/assets/js/jquery-1.6.2.min.js}"></script>
<script type="text/javascript" th:src="@{/assets/js/jquery-ui-1.8.16.custom.min.js}"></script>
<script type="text/javascript" th:src="@{/assets/js/jquery.filedrop.js}"></script>
<script type="text/javascript" th:src="@{/assets/js/jquery.editinplace.js}"></script>
<script type="text/javascript" th:src="@{/assets/js/upload.js}"></script>

<link th:href="@{/assets/css/styles.css}" rel="stylesheet" type="text/css"/>

<style type="text/css">

.hideme {
    display: none;
}

#expensesMenu {
    padding: 5px;
    margin-bottom: 5px;
    vertical-align: baseline;
}

#expensesMenu form {
    display: inline;
    margin: 0;
    padding: 0;
    vertical-align: baseline;
}

body {
    font-family: sans-serif;
    font-size: smaller;
    padding: 0;
    margin: 0;
    margin: 0;
    border: 0;
}

#dropzone {
    position: absolute;
    height: 5px;
    width: 10px;
    top: 200px;
    left: 10px;
    display: none;
    border-top: 1px solid #f5fffa;
    background-color: green;
    text-align: center;
    color: #90ee90;
    border-bottom: 1px solid #f5fffa;
    background-position: center;
    background-repeat: no-repeat;

}

#ecs {
    border: 1px solid gray;
    border-top: 0 solid gray;
    background-color: #d3d3d3;

}

#reportMenu {
    margin: 5px;
    margin-right: 0;
    margin-left: 0;
}

#expenseReportPanel {

    min-width: 500px;
    float: left;

    margin-left: 10px;
    float: left;
}

#expenseReportPanelTable {
    border: 1px solid #90ee90;
    background-color: #f5fffa;
}

.ec {
    padding: 5px;
}

#expensesBalance, #ecsBalance {

    padding: 5px;
    padding-left: 155px;
    width: 60px;
    display: inline-block;
}

.ec {
    cursor: move;
    border-top: 1px solid gray;
    background-color: #d3d3d3;
}

.expense.ui-draggable-dragging {
    border: 1px solid #f5fffa;
}

.ec.ui-draggable-dragging {
    border: 1px solid gray;

}

.ec .merchant {
    display: inline-block;
    width: 150px;
    font-size: inherit;
}

.ec .category {
    font-size: smaller;
    text-transform: uppercase;
    color: gray;
    letter-spacing: 1px;
}

.ec .amount {
    display: inline-block;
    width: 60px;
}

.expense {
    cursor: move;
    padding: 5px;
    border-top: 1px solid #f5fffa;
    background-color: #90ee90;
}

.expense .merchant {
    display: inline-block;
    width: 150px;
    font-size: inherit;
}

.expense .category {
    font-size: smaller;
    text-transform: uppercase;
    color: gray;
    width: 150px;
    display: inline-block;

    letter-spacing: 1px;
}

.expense .progress {
    width: 20px;
    float: right;
    display: none;

}

.expense .menu {
    display: inline-block;
    /*  float: right; */
}

.expense .amount {
    display: inline-block;
    width: 60px;
}

.dollar {
    color: gray
}

#ecsPanel {
    float: left;
    height: 400px;
    display: inline-block;
    width: 350px;
}

#reportPurpose {
    display: inline-block;

    height: 1em;
    padding: 5px;
    font-size: larger;
    color: green;

}

a:link {
    color: green;
}

#createNewReportButton {
}

#openExpensesForm {
    float: left;
    display: inline;
}

#ws {
    padding: 10px;
}

.rowSpacer {
    height: 16px;
}

.removeExpense {
    display: inline-block;
    width: 21px;
}

.trashIcon {
    float: right;
    margin: 5px;
    width: 16px;
    height: 20px;
    display: inline-block;
    background: url(/assets/images/trash_sprite.gif) no-repeat 0px 0px;
}

.trashIconOff {
    background: url(/assets/images/trash_sprite.gif) no-repeat 0px 0px;
}

.trashIconOn {
    background: url(/assets/images/trash_sprite.gif) no-repeat -16px 0px;
}

.addReceipt {
    display: inline-block;
    width: 26px;
    height: 16px;
}

.hasReceiptIcon {
    width: 19px;
    height: 16px;
    display: inline-block;
}

.hasReceiptOff {
    background: url(/assets/images/checkmark_sprite.gif) no-repeat 0px 0px;
}

.hasReceiptOn {
    background: url(/assets/images/checkmark_sprite.gif) no-repeat -20px 0px;
}

.createNewReportLabel {
    display: inline;
    float: left;
    padding-top: .3em;
    margin-right: 5px;

}

</style>

</head>
<body>

<!--
// .removeExpense .trashIcon
// .addReceipt .hasReceiptIcon
-->

<div id="ws">
    <div id="ecsPanel">
        <div id="ecs"></div>
        <div id="ecsBalance"></div>
    </div>

    <div id="expenseReportPanel">


        <div id="expenseReportPanelTable">
            <div id="expensesMenu">
                <form class="openExpensesForm">
                <span class="createNewReportLabel">
                    <a href="javascript:void(0)" id="createNewReportButton"><span id="createNewReport"
                                                                                  th:text="#{label.createNewReport}"/></a>
                    <span th:text="#{label.or}"/>
                    <span th:text="#{label.selectExistingReport}"/>
                </span>
                    <select id="openExpenses"/>
                </form>
            </div>

            <div id="reportMenu">
                <div id="reportPurpose"></div>
                <div id="trashIcon" class="trashIcon"></div>

            </div>
            <div id="expenses"></div>
        </div>
        <div id="expensesBalance"></div>

    </div>

    <div id="dropzone">

        <!--
        <form method="POST" action="/reports/receipts" enctype="multipart/form-data">
            <input type="name" id ="name"/>
            <input type="file" name="file" id = "file"/>
            <input type="submit"/>
        </form>
        -->

    </div>
</div>

<!-- configuration information -->
<span id="ecUrl" class="hideme" th:text="@{/reports/eligible-charges/}"/>
<span id="createErUrl" class="hideme" th:text="@{/reports}"/>
<span id="newReportString" class="hideme" th:text="#{label.createNewReport}"/>
<span id="createExpenseReportExpenseUrl" class="hideme" th:text="@{/reports/reportId/expenses}"/>
<img th:src="@{/assets/images/attach-receipt.png}" id="arImg" class="hideme"/>
<img th:src="@{/assets/images/ajax-loader.gif}" id="loaderImg" class="hideme"/>

<script lang="javascript" type="text/javascript">
<!--

// some global urls
var createExpenseReportExpenseUrl = $('#createExpenseReportExpenseUrl').html();
var newReportString = $('#newReportString').html();
var eligibleChargesUrl = $('#ecUrl').html();
var createErUrl = $('#createErUrl').html();
var expenseReportExpensesUrl = '/reports/reportId/expenses';
var reportPurposeUrl = '/reports/reportId/purpose';
var openReportsUrl = "/reports/open-reports";
var attachReceiptLabel = 'Attach receipt';
var newReportLabel = 'A New Report (click to edit)';
var currentlyDraggedExpenseId = null;
var movingChargeToExpenses = false, movingExpensesToCharges = false;
var loaderImageSrc = null;
var dropzoneNode = null;
var currentFocusedExpenseElement = null;
var isDragging = false;
var currentExpense = null;
var purposeReport = null;
var expenseReportMenu = null;
var ecsNode = null;
var currentEligibleCharge = null;
var expenseReport = null;
var expensesPanel = null;
var expensesNode = null;
var attachReceiptImageSrc = null;
var currentExpenseReport = null;
var currentExpenseToRevert = null;

function loadExpenseReportExpenses(expenseReportId) {
    currentExpenseReport = expenseReportId;
    var urlForReport = '/reports/' + expenseReportId;
    var urlForExpenses = expenseReportExpensesUrl.replace('reportId', '' + expenseReportId);
    expensesNode.html("");

    $.get(urlForReport, function(result) {
        purposeReport.html(result.purpose);
    });

    $.get(urlForExpenses, function(results) {
        var p = 0;
        for (var i = 0; i < results.length; i++) {
            var expense = results[i];
            p += expense.amount;
            drawExpense(expensesNode, expense);
        }
        $('#expensesBalance').html(renderPrice(p));

    }, 'json');

    refreshMenus(expenseReportId);
}

function drawEligibleCharge(ecsNode, ec) {
    var ecId = 'ec' + ec.id;
    $(ecsNode).append("<div id='" + ecId + "' class = 'ec'> <span class ='merchant'> " +
            ec.merchant + "</span>" + "<span class ='amount'>" +
            renderPrice(ec.amount) + "</span>" +
            " <span class='category'>" + ec.category + "</span> <span class ='rowSpacer'></span> " +
            "</div>");

    $('#' + ecId).draggable({
        revert : 'invalid', // ie, itll revert if its not dropped
        start : function () {
            console.log('moving charges to expenses == true')
            movingChargeToExpenses = true;
            currentEligibleCharge = ec;
        },
        stop : function () {
            movingChargeToExpenses = false;
            console.log('moving charges to expenses == false')
        },
        drag : function () {
        }
    });
}

function fileDragging(isIt) {

    isDragging = isIt;

    if (!isIt) {
        console.log("dragging is false");
        dropzoneNode.hide();
    }
    if (isIt) {

        // redraw the box
        var cfe = $(currentFocusedExpenseElement);
        var h = cfe.outerHeight();
        var w = cfe.outerWidth();
        var x = cfe.position().left;
        var y = cfe.position().top;

        dropzoneNode.css({backgroundImage  :'url( ' + attachReceiptImageSrc + ')'});
        dropzoneNode.css({ left :x, top :y, width:w, height:h });
        dropzoneNode.show()

    }

}

function expenseNodeId(ecId) {
    return 'expense' + ecId;
}

function deleteExpenseReport(expenseReportId) {
    var expenseDeletionUrl = '/reports/' + expenseReportId;
    $.ajax({
        type : 'POST',
        url :  expenseDeletionUrl  ,
        cache : false,
        dataType : 'json',
        data : {
            '_method' :'DELETE',
            expenseReportId:   expenseReportId
        },
        success : function(result) {
            renderEligibleCharges(function() {
                currentExpense = null ;
                expensesNode.html("");
                refreshMenus();
            });
        },
        error : function(e) {
            console.log('error addEligibleChargeToReport ' + JSON.stringify(e))
        }
    });
}

function restoreExpenseToEligibleCharges(expenseId) {
    var expenseDeletionUrl = '/' + expenseId;
    $.ajax({
        type : 'POST',
        url : '/reports/expenses/' + expenseId,
        cache : false,
        dataType : 'json',
        data : {
            '_method' :'DELETE',
            expenseId:   expenseId
        },
        success : function(result) {
            renderEligibleCharges(function() {
                loadExpenseReportExpenses(currentExpenseReport);
            });
        },
        error : function(e) {
            console.log('error addEligibleChargeToReport ' + JSON.stringify(e))
        }
    });
}


function drawExpense(expensesNode, ec) {

    var ecId = expenseNodeId(ec.id);
    var menu = '<SPAN class ="menu"> ';//<span class = "removeExpense"><span class  ="trashIcon"></span></span>
    // tood add the 'remove' button (a little white trash can icon)
    //console.log('receipt:' + ec.receipt);

    if (ec.receipt != '' && ec.receipt != null)
        menu += '<span class ="addReceipt"><span class="hasReceiptIcon" ></span></span>';

    menu += '</SPAN> ';


    $(expensesNode).append("<div id='" + ecId + "' class = 'expense'> <span class ='merchant'> " +
            ec.merchant + "</span>" + "<span class ='amount'>" +
            renderPrice(ec.amount) + "</span>" +
            " <span class='category'>" + ec.category + "</span> " + menu + " <span class = 'progress'><img src ='" +
            loaderImageSrc + "' /></span><span class ='rowSpacer'></span> </div>"
    );

    var hasReceiptImg = $('#' + ecId + ' .hasReceiptIcon');
    buildCssSprite(hasReceiptImg, 'hasReceiptOn', 'hasReceiptOff');

    var cb = createExpenseDropzoneCallback(currentExpenseReport, ec.id);
    var ceExpenseNode = $('#' + ecId);
    ceExpenseNode.bind('mouseover', cb);
    ceExpenseNode.bind('dragenter', cb);

    ceExpenseNode.draggable({
        revert : 'invalid', // ie, itll revert if its not dropped
        start : function () {
            movingExpensesToCharges = true;
            console.log('moving expenses to charges == true');
            currentlyDraggedExpenseId = ec.id;
        },
        stop : function () {
            movingExpensesToCharges = false;
            currentlyDraggedExpenseId = null;
            console.log('moving expenses to charges == false')
        },
        drag : function () {
        }
    });

}


function buildCssSprite(node, on, off) {
    var hri = node;
    hri.addClass(off)
            .mouseover(function() {
                hri.addClass(on);
                hri.removeClass(off);
            })
            .mouseout(function() {
                hri.addClass(off);
                hri.removeClass(on);
            });
}

function renderPrice(p) {
    p = p + ''; //make a string
    if (p.indexOf(".") != -1) {
        var np1 = p.split(".")[0];
        var np2 = p.split(".")[1].substring(0, 2);
        p = np1 + "." + np2;
    }
    return '<span class = "dollar">$</span> ' + p;
}

function loadEligibleCharges(callback) {
    $.ajax({
        url: eligibleChargesUrl,
        success: function(data) {
            callback(data);
        }
    });
}

function createExpenseReportIfRequired(purpose, cb) {
    var wrappedCallback = function() {
        cb(purpose, currentExpenseReport);
    };
    if (currentExpenseReport == null) {
        $.post(createErUrl, { purpose :  purpose }, function(result) {
            console.log('creating report ' + purpose + ':' + result);
            currentExpenseReport = parseInt(result);
            wrappedCallback();
        });
    } else {
        wrappedCallback();
    }
}

function addEligibleChargeToReport(ec, cb) {
    createExpenseReportIfRequired(newReportLabel, function(purpose, reportId) {

        var url = createExpenseReportExpenseUrl.replace('reportId', reportId);

        var obj = { chargeId : ec.id   };

        $.ajax({
            type : 'POST',
            url : url,
            cache : false,
            dataType : 'json',
            data : {  chargeId  :  ec.id },
            success : function(result) {
                cb(purpose, reportId);
            },
            error : function(e) {
                console.log('error addEligibleChargeToReport ' + JSON.stringify(e))
            }
        });

    });
}


function refreshMenus(erIdToSelect) {

    $.ajax({
        type : 'GET',
        url : openReportsUrl ,
        cache : false,
        dataType : "json",
        success : function(result) {

            var menu = expenseReportMenu;
            var menuOptions = menu.options;

            menu.options.length = 0;

            menuOptions[0] = new Option("", "", true, false);

            $(result).each(function(e) {
                var expense = result[e];
                var selectMenuId = expense.id;
                var mIndex = menuOptions.length;
                menuOptions[menuOptions.length] = new Option(expense.purpose, "" + selectMenuId, true, false);
                if (erIdToSelect != null) {
                    if (erIdToSelect == selectMenuId)
                        menu.selectedIndex = mIndex;
                }
            });


        },
        error : function(e) {
            console.log('error addEligibleChargeToReport ' + JSON.stringify(e))
        }
    });
}

function createExpenseDropzoneCallback(reportId, expenseId) {
    return function() {
        currentFocusedExpenseElement = this;
        currentExpense = expenseId;
        if (isDragging && !movingChargeToExpenses != false && movingExpensesToCharges != false) {
            console.log("dragging onto expense ID #" + expenseId);
        }
    };
}

function setupDropzone() {

    dropzoneNode.filedrop({
        maxfilesize : 20,
        fallback_id: 'upload_button'  ,  // an identifier of a standard file input element
        url: '/reports/receipts',        // upload handler, handles each file separately
        paramname: 'file',               // POST parameter name used on serverside to reference file
        data: {
            reportId : function() {
                return currentExpenseReport;
            },
            expenseId:  function() {
                return currentExpense;
            },
            name : 'file'
        },
        error: function(err, file) {
            console.log(JSON.stringify(err));
            switch (err) {
                case 'BrowserNotSupported':
                    alert('browser does not support html5 drag and drop')
                    break;
                case 'TooManyFiles':
                    // user uploaded more than 'maxfiles'
                    break;
                case 'FileTooLarge':
                    // program encountered a file whose size is greater than 'maxfilesize'
                    // FileTooLarge also has access to the file which was too large
                    // use file.name to reference the filename of the culprit file
                    break;
                default:
                    break;
            }
        },
        dragOver: function() {

            // user dragging files over #dropzone
        },
        dragLeave: function() {
            // user dragging files out of #dropzone
            fileDragging(false);
        },
        docOver: function() {
            fileDragging(true);
        },
        docLeave: function() {
            fileDragging(false);
            // user dragging files out of the browser document window
        },
        drop: function() {
            console.log('fileDrop!drop()')
            fileDragging(false);
            console.log("drop is finished");
            // user drops file
        },
        uploadStarted: function(i, file, len) {
            console.log('started uploading file ' + i + ' of ' + len + ' ' + file);

            $('#' + currentFocusedExpenseElement.id + ' .progress').show();

            // a file began uploading
            // i = index => 0, 1, 2, 3, 4 etc
            // file is the actual file of the index
            // len = total files user dropped
        },
        uploadFinished: function(i, file, response, time) {
            //var r =  ( response)

            $('#' + currentFocusedExpenseElement.id + ' .progress').hide();
        },
        progressUpdated: function(i, file, progress) {
            // this function is used for large files and updates intermittently
            // progress is the integer value of file being uploaded percentage to completion
        },
        speedUpdated: function(i, file, speed) {
            // speed in kb/s
        },
        rename: function(name) {
            // name in string format
            // must return alternate name as string
        },
        beforeEach: function(file) {
            // file is a file object
            // return false to cancel upload
        },
        afterAll: function() {
            console.log('finished uploading (afterAll())');
            $('#' + currentFocusedExpenseElement.id + ' .progress').hide();

            loadExpenseReportExpenses(currentExpenseReport)
        }
    });

}


$(function() {

    attachReceiptImageSrc = $('#arImg').attr('src');
    loaderImageSrc = $('#loaderImg').attr('src');

    console.log('the image url is ' + attachReceiptImageSrc);

    dropzoneNode = $('#dropzone');
    ecsBalance = $('#ecsBalance');
    expensesNode = $('#expenses');
    ecsNode = $('#ecs');
    expenseReport = $('#expenseReportPanel');
    purposeReport = $("#reportPurpose");
    purposeReport.html(newReportLabel);

    setupDropzone();

    var trashIconNode = $('#trashIcon');
    trashIconNode.click(function() {
        deleteExpenseReport(currentExpenseReport);
    });

    buildCssSprite($('#trashIcon'), 'trashIconOn', 'trashIconOff');

    purposeReport.editInPlace({
        callback: function(originalElement, html, original) {
            createExpenseReportIfRequired(html, function(p, cid) {

                var newUrl = reportPurposeUrl.replace('reportId', currentExpenseReport);

                $.ajax({
                    type : 'POST',
                    url : newUrl,
                    cache : false,
                    dataType : 'json',
                    data : {  title  :  html },
                    success : function(result) {
                        refreshMenus(currentExpenseReport);
                    },
                    error : function(e) {
                        alert('error couldnt update purpose ' + JSON.stringify(e))
                    }
                });

            });

            return (html);
        }
    });

    ecsNode.droppable({
        accept : '.expense',
        drop: function(event, ui) {
            console.log('something attempted a drop on the eligible charges pallete');
            if (!movingExpensesToCharges) {
                return;
            }
            console.log("moving the expense back to the charges.");
            restoreExpenseToEligibleCharges(currentlyDraggedExpenseId);
        }
    });

    expenseReport.droppable({
        accept : '.ec',
        drop: function(event, ui) {
            console.log('something attempted a drop on the expenses pallete');
            if (!movingChargeToExpenses) {
                return;
            }
            console.log('moving charges back to expenses');
            fileDragging(false);
            var draggable = ui.draggable;
            var ec = currentEligibleCharge;
            addEligibleChargeToReport(ec, function(purpose, currentExpenseReportId) {
                loadExpenseReportExpenses(currentExpenseReportId);
                renderEligibleCharges();
            });
        }
    });

    expenseReportMenu = document.getElementById("openExpenses");// cant use jquery
    $(expenseReportMenu).bind('change', function() {
        if (this.value != '') {
            var eri = parseInt(this.value);
            loadExpenseReportExpenses(eri);
        }
    });

    $('#createNewReportButton').bind('click', function(e) {
        createNewExpenseReport();
    });

    refreshMenus();
    renderEligibleCharges();

});

function createNewExpenseReport() {
    currentExpenseReport = null;
    createExpenseReportIfRequired(newReportLabel, function(p, erId) {
        loadExpenseReportExpenses(erId);
    });
}

function renderEligibleCharges(cb) {
    console.log('rendering eligible charges');
    loadEligibleCharges(function(data) {

        ecsNode.html("");
        var total = 0.0;
        for (var i = 0; i < data.length; i++) {
            drawEligibleCharge(ecsNode, data[i]);
            total += data[i].amount;
        }

        ecsBalance.html(renderPrice(total));
        if (cb != null) {
            cb();
        }
    });
}

//-->
</script>
</body>
</html>