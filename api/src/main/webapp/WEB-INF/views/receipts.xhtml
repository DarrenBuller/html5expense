<!DOCTYPE html>
<html>
<head>

    <title th:text="#{application.title}">the title of the application</title>

    <!--[if lt IE 9]>
    <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <script type="text/javascript" th:src="@{/assets/js/json2.js}"></script>
    <script type="text/javascript" th:src="@{/assets/js/jquery-1.6.2.min.js}"></script>
    <script type="text/javascript" th:src="@{/assets/js/jquery-ui-1.8.16.custom.min.js}"></script>
    <script type="text/javascript" th:src="@{/assets/js/jquery.filedrop.js}"></script>
    <script type="text/javascript" th:src="@{/assets/js/jquery.editinplace.js}"></script>
    <script type="text/javascript" th:src="@{/assets/js/upload.js}"></script>

    <link th:href="@{/assets/css/styles.css}" rel="stylesheet" type="text/css"/>

    <style type="text/css">
        .hideme {
            display: none;
        }

        #expensesMenu {
            padding: 5px;
            margin-bottom: 5px;
            vertical-align: baseline;
        }

        #expensesMenu form {
            display: inline;
            margin: 0;
            padding: 0;
            vertical-align: baseline;
        }

        body {
            font-family: sans-serif;
            font-size: smaller;
        }

        #dropzone {
            height: 500px;
            width: 500px;
            background-color: #dcdcdc;
            position: absolute;
            top: 400px
        }

        #ecs {
            border: 1px solid gray;
            border-top: 0 solid gray;
            background-color: #d3d3d3;
        }

        #expenseReportPanel {
            border: 1px solid #90ee90;
            background-color: #f5fffa;
            min-width: 500px;
            float: left;
            height: 400px;
            margin-left: 10px;
            float: left;
        }

        .ec {
            padding: 5px;
        }

        #ecsBalance {

            padding: 5px;
            padding-left: 155px;
            width: 60px;
            display: inline-block;
        }

        .ec {
            cursor: move;
            border-top: 1px solid gray;
            background-color: #d3d3d3;
        }

        .ui-draggable-dragging {
            border: 1px solid gray;
        }

        .ec .merchant {
            display: inline-block;
            width: 150px;
            font-size: inherit;
        }

        .ec .category {
            font-size: smaller;
            text-transform: uppercase;
            color: gray;
            letter-spacing: 1px;
        }

        .ec .amount {
            display: inline-block;
            width: 60px;
        }

            /** Expense report row */

        .expense {
            padding: 5px;
            border-top: 1px solid #f5fffa;
            background-color: #90ee90;
        }

        .expense .merchant {
            display: inline-block;
            width: 150px;
            font-size: inherit;
        }

        .expense .category {
            font-size: smaller;
            text-transform: uppercase;
            color: gray;
            letter-spacing: 1px;
        }

        .expense .amount {
            display: inline-block;
            width: 60px;
        }

        .dollar {
            color: gray
        }

        #ecsPanel {
            float: left;

            display: inline-block;
            width: 350px;
        }

        #reportPurpose {
            height: 1em;
            padding: 5px;
            font-size: larger;
            color: green;
        }

        a:link {
            color: green;
        }

        #createNewReportButton {
        }

        #openExpensesForm {
            float: left;
            display: inline;
        }

        .createNewReportLabel {
            display: inline;
            float: left;
            padding-top: .3EM;
            margin-right: 5px;

        }
    </style>

</head>
<body>

<div id="ecsPanel">
    <div id="ecs"></div>
    <div id="ecsBalance"></div>
</div>

<div id="expenseReportPanel">


    <div id="expensesMenu">
        <form class="openExpensesForm">

            <span class="createNewReportLabel">
                <a href="javascript:void(0)" id="createNewReportButton"><span id="createNewReport"
                                                                              th:text="#{label.createNewReport}"/></a>

                <span th:text="#{label.or}"/>

                 <span th:text="#{label.selectExistingReport}"/>
            </span>

            <select id="openExpenses"/>
        </form>
    </div>

    <div id="reportPurpose"></div>
    <div id="expenses"></div>
    <div id="expensesBalance"></div>

</div>

<div id="dropzone">

    <!--
    <form method="POST" action="/reports/receipts" enctype="multipart/form-data">
        <input type="name" id ="name"/>
        <input type="file" name="file" id = "file"/>
        <input type="submit"/>
    </form>
    -->

</div>

<!-- configuration information -->
<span id="ecUrl" class="hideme" th:text="@{/reports/eligible-charges/}"/>
<span id="createErUrl" class="hideme" th:text="@{/reports}"/>
<span id="newReportString" class="hideme" th:text="#{label.createNewReport}"/>
<span id="createExpenseReportExpenseUrl" class="hideme" th:text="@{/reports/reportId/expenses}"/>

<script lang="javascript" type="text/javascript">
<!--

// some global urls
var createExpenseReportExpenseUrl = $('#createExpenseReportExpenseUrl').html();
var newReportString = $('#newReportString').html();
var eligibleChargesUrl = $('#ecUrl').html();
var createErUrl = $('#createErUrl').html();
var expenseReportExpensesUrl = '/reports/reportId/expenses';
var reportPurposeUrl = '/reports/reportId/purpose';
var openReportsUrl = "/reports/open-reports";
var newReportLabel = 'A New Report (click to edit)';

var purposeReport = null;
var expenseReportMenu = null;
var ecsNode = null;
var currentEligibleCharge = null;
var expenseReport = null;
var expensesPanel = null;
var expensesNode = null;
var currentExpenseReport = null;


function loadExpenseReportExpenses(expenseReportId) {
    currentExpenseReport = expenseReportId;
    var urlForReport = '/reports/' + expenseReportId;
    var urlForExpenses = expenseReportExpensesUrl.replace('reportId', '' + expenseReportId);
    expensesNode.html("");

    $.get(urlForReport, function(result) {
        purposeReport.html(result.purpose);
    });

    $.get(urlForExpenses, function(results) {
        for (var i = 0; i < results.length; i++) {
            var expense = results[i];
            drawExpense(expensesNode, expense);
        }
    }, 'json');
}

function drawEligibleCharge(ecsNode, ec) {
    var ecId = 'ec' + ec.id;
    $(ecsNode).append("<div id='" + ecId + "' class = 'ec'> <span class ='merchant'> " +
            ec.merchant + "</span>" + "<span class ='amount'>" +
            renderPrice(ec.amount) + "</span>" +
            " <span class='category'>" + ec.category + "</span> " +
            "</div>");

    $('#' + ecId).draggable({
        revert : 'invalid', // ie, itll revert if its not dropped
        start : function () {
            currentEligibleCharge = ec;
        },
        stop : function () {
        },
        drag : function () {

            console.log("drag")
        }
    });
}


function drawExpense(expensesNode, ec) {

    var ecId = 'expense' + ec.id;
    $(expensesNode).append("<div id='" + ecId + "' class = 'expense'> <span class ='merchant'> " +
            ec.merchant + "</span>" + "<span class ='amount'>" +
            renderPrice(ec.amount) + "</span>" +
            " <span class='category'>" + ec.category + "</span> " +
            "</div>");

    $('#'+ecId).bind('mouseover', createExpenseDropzoneCallback( currentExpenseReport, ec.id ))

}

function renderPrice(p) {
    p = p + ''; //make a string
    if (p.indexOf(".") != -1) {
        var np1 = p.split(".")[0];
        var np2 = p.split(".")[1].substring(0, 2);
        p = np1 + "." + np2;
    }
    return '<span class = "dollar">$</span> ' + p;
}

function loadEligibleCharges(callback) {
    $.ajax({
        url: eligibleChargesUrl,
        success: function(data) {
            callback(data);
        }
    });
}


function createExpenseReportIfRequired(purpose, cb) {

    var wrappedCallback = function() {
        cb(purpose, currentExpenseReport);
    };

    if (currentExpenseReport == null) {
        $.post(createErUrl, { purpose :  purpose }, function(result) {
            currentExpenseReport = parseInt(result);
            wrappedCallback();
        });
    } else {
        wrappedCallback();
    }
}

function addEligibleChargeToReport(ec, cb) {
    createExpenseReportIfRequired(newReportLabel, function(purpose, reportId) {

        var url = createExpenseReportExpenseUrl.replace('reportId', reportId);

        var obj = { chargeId : ec.id   };

        $.ajax({
            type : 'POST',
            url : url,
            cache : false,
            dataType : 'json',
            data : {  chargeId  :  ec.id },
            success : function(result) {
                cb(purpose, reportId);
            },
            error : function(e) {
                alert('error addEligibleChargeToReport ' + JSON.stringify(e))
            }
        });

    });
}


function refreshMenus(erIdToSelect) {

    $.ajax({
        type : 'GET',
        url : openReportsUrl ,
        cache : false,
        dataType : "json",
        success : function(result) {


            var menu = expenseReportMenu;
            var menuOptions = menu.options;

            menu.options.length = 0;

            menuOptions[0] = new Option("", "", true, false);

            $(result).each(function(e) {
                var expense = result[e];
                var selectMenuId = expense.id;
                var mIndex = menuOptions.length;
                menuOptions[menuOptions.length] = new Option(expense.purpose, "" + selectMenuId, true, false);
                if (erIdToSelect != null) {
                    if (erIdToSelect == selectMenuId)
                        menu.selectedIndex = mIndex;
                }
            });


        },
        error : function(e) {
            alert('error addEligibleChargeToReport ' + JSON.stringify(e))
        }
    });


}

function createExpenseDropzoneCallback ( reportId, expenseId){
    var callback =function(){
        alert( 'the report id ' + reportId + ':'+ expenseId);
    }     ;
    return callback;
}

/**
 * the behavior is this:
 *
 * when a drop enters a node, its report + expense ids are cached (lets get that working, first)
 *
 */
function setupDropzone () {

    // todo we need to make sure that when a drag enters a single expense, that the dropzone sits on top of it and provides some visual cues

    $('#dropzone').filedrop({
        fallback_id: 'upload_button'  ,  // an identifier of a standard file input element
        url: '/reports/receipts',              // upload handler, handles each file separately
        paramname: 'file',          // POST parameter name used on serverside to reference file
        data: {
            reportId : function(){
                return 205;
            },
            expenseId:  178,
            name : 'file'
        },
        error: function(err, file) {
            alert(JSON.springify(err));
            switch (err) {
                case 'BrowserNotSupported':
                    alert('browser does not support html5 drag and drop')
                    break;
                case 'TooManyFiles':
                    // user uploaded more than 'maxfiles'
                    break;
                case 'FileTooLarge':
                    // program encountered a file whose size is greater than 'maxfilesize'
                    // FileTooLarge also has access to the file which was too large
                    // use file.name to reference the filename of the culprit file
                    break;
                default:
                    break;
            }
        },
        dragOver: function() {
            // user dragging files over #dropzone
        },
        dragLeave: function() {
            // user dragging files out of #dropzone
        },
        docOver: function() {
            // user dragging files anywhere inside the browser document window
        },
        docLeave: function() {
            // user dragging files out of the browser document window
        },
        drop: function() {
            // user drops file
        },
        uploadStarted: function(i, file, len) {
            console.log('uploading file ' + i + ' of ' + len + ' ' + file)
            // a file began uploading
            // i = index => 0, 1, 2, 3, 4 etc
            // file is the actual file of the index
            // len = total files user dropped
        },
        uploadFinished: function(i, file, response, time) {
            // response is the data you got back from server in JSON format.
        },
        progressUpdated: function(i, file, progress) {
            // this function is used for large files and updates intermittently
            // progress is the integer value of file being uploaded percentage to completion
        },
        speedUpdated: function(i, file, speed) {
            // speed in kb/s
        },
        rename: function(name) {
            // name in string format
            // must return alternate name as string
        },
        beforeEach: function(file) {
            // file is a file object
            // return false to cancel upload
        },
        afterAll: function() {
            alert('finished!');// runs after all files have been uploaded or otherwise dealt with
        }
    });

}


$(function() {


    ecsBalance = $('#ecsBalance');
    expensesNode = $('#expenses');
    ecsNode = $('#ecs');
    expenseReport = $('#expenseReportPanel');
    purposeReport = $("#reportPurpose");
    purposeReport.html(newReportLabel);


    setupDropzone();

    purposeReport.editInPlace({
        callback: function(originalElement, html, original) {
            createExpenseReportIfRequired(html, function(p, cid) {

                var newUrl = reportPurposeUrl.replace('reportId', currentExpenseReport);

                $.ajax({
                    type : 'POST',
                    url : newUrl,
                    cache : false,
                    dataType : 'json',
                    data : {  title  :  html },
                    success : function(result) {
                        refreshMenus(currentExpenseReport);
                    },
                    error : function(e) {
                        alert('error addEligibleChargeToReport ' + JSON.stringify(e))
                    }
                });

            });

            return(html);
        }
    });

    // setup the drop zone
    expenseReport.droppable({
        drop: function(event, ui) {
            var draggable = ui.draggable;
            var ec = currentEligibleCharge;
            addEligibleChargeToReport(ec, function(purpose, currentExpenseReportId) {
                loadExpenseReportExpenses(currentExpenseReportId);
                renderEligibleCharges();
            });
        }
    });

    expenseReportMenu = document.getElementById("openExpenses");// cant use jquery
    $(expenseReportMenu).bind('change', function() {
        if (this.value != '') {
            var eri = parseInt(this.value);
            loadExpenseReportExpenses(eri);
        }
    });


    refreshMenus();
    renderEligibleCharges();

});

function renderEligibleCharges(cb) {
    loadEligibleCharges(function(data) {
        ecsNode.html("")
        var total = 0.0;
        for (var i = 0; i < data.length; i++) {
            drawEligibleCharge(ecsNode, data[i]);
            total += data[i].amount;
        }

        ecsBalance.html(renderPrice(total));
        if (cb != null) {
            cb();
        }

    });

    $('#createNewReportButton').bind('click', function(e) {
        currentExpenseReport = null;
        createExpenseReportIfRequired(newReportLabel, function(p, erId) {
            refreshMenus();
            loadExpenseReportExpenses(erId);
        });

    });
}

//-->
</script>
</body>
</html>